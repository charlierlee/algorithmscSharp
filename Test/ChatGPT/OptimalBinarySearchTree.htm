

<html>
    <head>
        <script>
        document.addEventListener("DOMContentLoaded", function() {

/* create a function with weights as an input array. In this function do the following: */
function calculateOptimalBinarySearchTree(weights) {
  
/* write a function the generates an m by n matrix initialized with 0. */
  function matrix(m, n) {
      var result = []
      for(var i = 0; i < n; i++) {
          result.push(new Array(m).fill(0))
      }
      return result
  }
  /* create a variable n with a size of the input array. */
    var n = weights.length;
  
  /* create a variable for storing integer cache c in an n+1 by n+1 matrix */
    var c = matrix(n+1,n+1)
  
  /* create a variable for storing integer weights w in an n+1 by n+1 matrix */
    var w = matrix(n+1,n+1)
  
  /* create a variable for storing integer roots root in an n by n matrix */
    var root = matrix(n,n)
  
  /* for each outer sub problem s do the following */
    for (var s = 0; s <= n; s++) {
  
  /* for each inner sub problem i do following starting at 1 and ending at n-s */
      for (var i = 1; i <= n-s; i++) {
  
  /* create a variable j equal to the inner sub problem plus the outer sub problem */
        var j = i + s;
  
  /* set w's previous row equal w[i-1]'s cell below plus the weight j-1 */
        w[i-1][j] = w[i-1][j-1] + weights[j-1];
  
  /* create a variable min_cost initialized with max value */
        var min_cost = Number.MAX_VALUE;
  
  /* for each inner inner subproblem r starting at i until j do the following */
        for (var r = i; r <= j; r++) {
  
  /* if min_cost is greater than c's previous items plus c's rows below then do the following */
          if (min_cost > c[i-1][r-1] + c[r][j]) {
  
  /* set min_cost to c's previous item plus c's row below */
            min_cost = c[i-1][r-1] + c[r][j];
  
  /* set the root to the previous index i, j */
            root[i-1][j-1] = r;
          }
        }
  
  /* set c's previous row to w's previous row plus min_cost */
        c[i-1][j] = w[i-1][j] + min_cost;
      }
    }
  
  /* return c's top right index */
    return c[0][n];
  }
  /* initialize an array with the weights 4, 2, 6, 3 */
  var Weights = [4,2,6,3];
  /* call the function to compute an optimal binary search tree and store the result */
  var result = calculateOptimalBinarySearchTree(Weights);
  /* write the result onto the page */
  document.writeln(result);

  
});

        </script>
    </head>
    <body style="margin: 0;">
        <div style="background-color: black; position: fixed; bottom: 0; width: 100%; height: 20px; padding: 20px; opacity: .85; z-index: 1000;">
            <div style="display: inline-block; color: white; vertical-align: top; margin-top: 4px; font-family: Helvetica, sans-serif;">
                Code generated by <a style="color: white; text-decoration: none; font-weight: bold;" href="https://openai.com/blog/openai-codex/">OpenAI Codex</a>
            </div>
        </div>
    </body>
</html>