@page "/tictactoe"

@using Lib.TicTacToe;

<style>
    .board {
        --board-size: 3; /* Default board size */
    }
</style>

<div class="board">
    @for (int row = 0; row < game.boardSize; row++)
    {
        <div class="row">
            @for (int col = 0; col < game.boardSize; col++)
            {
                var localRow = row; // Create a local variable to preserve scope
                var localCol = col; // Create a local variable to preserve scope
                <div class="cell" @onclick="() => CellClicked(localRow, localCol)">
                    <div class="cell-content">
                        @GetCellContent(row, col)
                    </div>
                </div>
            }
        </div>
    }
</div>
<div>@response</div>
<div>
    <button @onclick="ResetGame">Reset Game</button>
</div>

@code {

    private const int boardSize = 3;
    private const int aimaxDepth = 5;
    private string response = string.Empty;
    private TicTacToeGame game = new TicTacToeGame(boardSize);
    private AIPlayer aiPlayer = new AIPlayer();
    private Random random = new Random();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        bool aiGoesFirst = random.Next(2) == 0;
        game = new TicTacToeGame(boardSize);
        
        if (aiGoesFirst)
        {
            var (aiRow, aiCol) = aiPlayer.GetRandomMove(game);
            game.MakeMoveAI(aiRow, aiCol);
            CheckForGameEnd();
        }
    }
    private void CellClicked(int row, int col)
    {
        if (game.CurrentPlayer == Player.X && game.Board[row, col] == Player.None)
        {
            game.MakeMove(row, col);
            if (!CheckForGameEnd())
            {
                // AI's turn
                var (aiRow, aiCol) = aiPlayer.GetBestMove(game, aimaxDepth);
                game.MakeMoveAI(aiRow, aiCol);
                CheckForGameEnd();
            }
        }
    }

    private string GetCellContent(int row, int col)
    {
        var player = game.Board[row, col];
        return player == Player.X ? "X" : player == Player.O ? "O" : "";
    }

    private bool CheckForGameEnd()
    {
        if (game.HasWin(Player.X))
        {
            response = "Player X wins!";
            return true;
        }
        else if (game.HasWin(Player.O))
        {
            response = "Player O wins!";
            return true;
        }
        else if (game.IsDraw())
        {
            response = "It's a draw!";
            return true;
        }
        
        return false;
    }

    private void ResetGame()
    {
        this.OnInitialized();
    }
}