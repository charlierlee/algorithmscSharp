@page "/tictactoe"

@using Lib.TicTacToe;

<PageTitle>Tic Tac Toe</PageTitle>

<style>
    .board {
        --board-size: @boardSize;
    }
</style>

<div class="board">
    @for (int row = 0; row < game.boardSize; row++)
    {
        <div class="row">
            @for (int col = 0; col < game.boardSize; col++)
            {
                var localRow = row; // Create a local variable to preserve scope
                var localCol = col; // Create a local variable to preserve scope
                <div class="cell" @onclick="() => CellClicked(localRow, localCol)">
                    <div class="cell-content">
                        @GetCellContent(row, col)
                    </div>
                </div>
            }
        </div>
    }
</div>
<div>@response</div>
<div>&#160;</div>
<div>
    <button @onclick="ResetGame">Reset Game</button>
</div>
<div>&#160;</div>
<div>
    <div>Select Algorithm</div>
    <InputSelect @bind-Value="selectedAlgorithm" @oninput="SelectedAlgorithmChanged">
        <option value="mcts">MCTS</option>
        <option value="minimax">Minimax</option>
    </InputSelect>
</div>
<div>&#160;</div>
<div>
    <div>Board Size</div>
    <InputNumber @oninput="BoardSizeChanged" class="cost" @bind-Value="boardSize" style="width:75px" min="3" max="4" />,
</div>
@code {


    private int boardSize = 3;
    private string selectedAlgorithm = "mcts"; // Default to Minimax
    private string response = string.Empty;
    private TicTacToeGame game;
    private IGameAI aiPlayer;
    private Random random = new Random();
    

    private void BoardSizeChanged(ChangeEventArgs e)
    {
        var temp = boardSize;
        if(!string.IsNullOrEmpty((string)e.Value))
        {
            int.TryParse((string)e.Value, out temp);
            if(temp < 5 && temp > 2){
                boardSize = temp;
                OnInitialized();
            }
        }
    }

    private void SelectedAlgorithmChanged(ChangeEventArgs e)
    {
        selectedAlgorithm = (string)e.Value;
        OnInitialized();
    }
    

    protected override void OnInitialized()
    {
        base.OnInitialized();
        response = string.Empty;
        bool aiGoesFirst = random.Next(2) == 0;
        game = new TicTacToeGame(boardSize, Player.X);
        if (selectedAlgorithm == "minimax")
        {
            aiPlayer = new MinimaxAI(4);
        }
        else if (selectedAlgorithm == "mcts")
        {
            aiPlayer = new MonteCarloTreeSearchAI(1000, 6);
        }
    }
    private void CellClicked(int row, int col)
    {
        if (game.CurrentPlayer == Player.X && game.Board[row, col] == Player.N)
        {
            game.MakeMove(row, col);
            if (!CheckForGameEnd())
            {
                // AI's turn
                var (aiRow, aiCol) = aiPlayer.GetBestMove(game);
                game.MakeMove(aiRow, aiCol);
                CheckForGameEnd();
            }
        }
    }

    private string GetCellContent(int row, int col)
    {
        var player = game.Board[row, col];
        return player == Player.X ? "X" : player == Player.O ? "O" : "";
    }

    private bool CheckForGameEnd()
    {
        if (game.HasWin(Player.X))
        {
            response = "Player X wins!";
            return true;
        }
        else if (game.HasWin(Player.O))
        {
            response = "Player O wins!";
            return true;
        }
        else if (game.IsDraw())
        {
            response = "It's a draw!";
            return true;
        }
        
        return false;
    }

    private void ResetGame()
    {
        this.OnInitialized();
    }
}