@page "/allpairsshortestpath"
@inject IJSRuntime JsRuntime


<PageTitle>All-Pairs Shortest Path</PageTitle>

<div>For more information about the Floyd-Warshall algorithm, click <a href="https://leenet.link/posts/floyd-warshall-algorithm">here</a></div>
<div>&#160;</div>
<dl>
<dt>Load Graph</dt>
<dd>
    <div>
        <InputTextArea rows="5" class="form-control" @bind-Value="GraphText" placeholder="insert graph here" />
    </div>
 <div style="margin-top:5px;">
    <button class="btn btn-primary" onclick="@LoagGraph">Load</button>
</div>
</dd>
  <dt>Nodes</dt>
  <dd> <input type="number" class="form-control" style="max-width:100px;"
        @bind="NodeCount" @bind:event="oninput" step="1" min="3" max="@MaxGraphs" /></dd>
  <dt>Edges</dt>
  <dd><input type="number" class="form-control" style="max-width:100px;"
        @bind="EdgeCount" @bind:event="oninput" step="1" min="@(NodeCount)" /></dd>
</dl>
<div>
    
    <button class="btn btn-primary" onclick="@GenerateGraph">Generate</button>
</div>
<table>
    <tr>
        <td style="background-color:gray">
            &#160;&#160;&#160;
        </td>
        <td>
            <div @ref="_inputGraphRenderTo"></div>
        </td>
    </tr>
</table>


<div>&#160;</div>
<div>
    <button class="btn btn-primary" onclick="@SolveViaBellmanFordPath" disabled="@(inputGraph==null)">Solve via Bellman-Ford</button>
    <button class="btn btn-primary" onclick="@SolveViaJohnson" disabled="@(inputGraph==null)">Solve via Johnson</button>
    <button class="btn btn-primary" onclick="@SolveViaFloydWarshall" disabled="@(inputGraph==null)">Solve via Floyd-Warshall</button>
</div>
<table>
    <tr>
        <td style="background-color:gray;">
            &#160;&#160;&#160;
        </td>
        <td>
            @for(var i = 0; i < memberRef.Count(); i++)
            {
                var i2 = i; // i2 is required
                <div id="@i" @ref="memberRef[i2]"></div>
            }
        </td>
    </tr>
</table>


@code 
{
    private const int MaxGraphs = 50;
    private ElementReference _inputGraphRenderTo;
    private ElementReference[] memberRef { get; set; } = new ElementReference[MaxGraphs];

    private int NodeCount = 5;
    private int EdgeCount = 8;
    private string GraphText 
= @"5 8
1 2 2
1 5 3
2 4 -2
3 1 1
4 1 4
4 3 1
4 5 2
5 3 -1
1";
    private string inputDotDiagram = "";
    private string solvedDotDiagram = "";
    private Lib.Graphs.MathGraph<int> inputGraph;
    private async Task LoagGraph()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");

            string[] lines = GraphText.Split("\n");
            inputGraph = new Lib.Graphs.MathGraph<int>(true);
            Lib.Graphs.MathGraph<int>.LoadGraph(inputGraph, lines);
            inputDotDiagram = inputGraph.GenerateDot();


        await diagramModule.InvokeVoidAsync("renderDot", inputDotDiagram, _inputGraphRenderTo);
    }
    private async Task GenerateGraph()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");

            if(EdgeCount <= NodeCount){
                EdgeCount = NodeCount;
            }
            inputGraph = GenerateRandomGraph(NodeCount+1, EdgeCount);
            inputDotDiagram = inputGraph.GenerateDot();


        await diagramModule.InvokeVoidAsync("renderDot", inputDotDiagram, _inputGraphRenderTo);
    }
    public Lib.Graphs.MathGraph<int> GenerateRandomGraph(int Nodes, int Edges){
        var graph = new Lib.Graphs.MathGraph<int>(true);
        Lib.Graphs.MathGraph<int>.GenerateGraph(graph, Nodes, Edges, -3);
        GraphText = graph.GenerateAdjacentList();
        return graph;
    }
    private async Task SolveViaBellmanFordPath()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");
        
        for(var i=0;i<memberRef.Count();i++)
        {
            await diagramModule.InvokeVoidAsync("clearDot", memberRef[i]);
        }
        var distances_edges = inputGraph.FloydWarshall();
        if(distances_edges!=null)
        {
            int count = 0;
            var graphs = Lib.Graphs.MathGraph<int>.LoadBellmanFordPathsFromGraph(inputGraph);
            foreach(var graph in graphs.Values)
            {
                if(graph.GetVertices().Count == 0)
                    continue;
                solvedDotDiagram = graph.GenerateDot();
                await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, memberRef[count]);
                count += 1;
            }
            
        }
        else
        {
            solvedDotDiagram = "digraph {}";
            await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, memberRef[0]);
        }
    }
    private async Task SolveViaJohnson()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");
        
        for(var i=0;i<memberRef.Count();i++)
        {
            await diagramModule.InvokeVoidAsync("clearDot", memberRef[i]);
        }
        int count = 0;
        var graphs = Lib.Graphs.MathGraph<int>.LoadJohnsonPathsFromGraph(inputGraph);
        foreach(var graph in graphs.Values)
        {
            if(graph.GetVertices().Count == 0)
                continue;
            solvedDotDiagram = graph.GenerateDot();
            await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, memberRef[count]);
            count += 1;
        }
    }
    private async Task SolveViaFloydWarshall()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");
        
        for(var i=0;i<memberRef.Count();i++)
        {
            await diagramModule.InvokeVoidAsync("clearDot", memberRef[i]);
        }
        var next_distances = inputGraph.FloydWarshall();
        if(next_distances!=null)
        {
            int count = 0;
            var next = next_distances.Item1;
            var distances = next_distances.Item2;
            var graphs = Lib.Graphs.MathGraph<int>.LoadFloydWarshalPaths(inputGraph, next, distances);
            foreach(var graph in graphs.Values)
            {
                if(graph.GetVertices().Count == 0)
                    continue;
                solvedDotDiagram = graph.GenerateDot();
                await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, memberRef[count]);
                count += 1;
            }
        }
        else
        {
            solvedDotDiagram = "digraph {}";
            await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, memberRef[0]);
        }
    }
}