@page "/singlesourceshortestpath"
@inject IJSRuntime JsRuntime


<PageTitle>Single Source Shortest Path</PageTitle>

<div>For more information about the Bellman-Ford algorithm, click <a href="https://leenet.link/posts/bellman-ford-algorithm">here</a></div>
<div>&#160;</div>
<dl>
<dt>Load Graph</dt>
<dd>
    <div>
        <InputTextArea rows="5" class="form-control" @bind-Value="GraphText" placeholder="insert graph here" />
    </div>
 <div style="margin-top:5px;">
    <button class="btn btn-primary" onclick="@LoagGraph">Load</button>
</div>
</dd>
  <dt>Nodes</dt>
  <dd> <input type="number" class="form-control" style="max-width:100px;"
        @bind="NodeCount" @bind:event="oninput" step="1" min="3" max="50" /></dd>
  <dt>Edges</dt>
  <dd><input type="number" class="form-control" style="max-width:100px;"
        @bind="EdgeCount" @bind:event="oninput" step="1" min="@(NodeCount)" /></dd>
</dl>
<div>
    
    <button class="btn btn-primary" onclick="@GenerateGraph">Generate</button>
</div>
<table>
    <tr>
        <td style="background-color:gray;">
            &#160;&#160;&#160;
        </td>
        <td>
            <div @ref="_inputGraphRenderTo"></div>
        </td>
    </tr>
</table>


<div>&#160;</div>
 <dl>
  <dt>Starting Vertex</dt>
  <dd><input type="number" class="form-control" style="max-width:100px;"
        @bind="StartingVertex" @bind:event="oninput" step="1" min="1" max="@NodeCount" /></dd>
</dl>
<div>
    <button class="btn btn-primary" onclick="@ComputeBellmanFord" disabled="@(inputGraph==null)">compute bellman-ford</button>
</div>
<table>
    <tr>
        <td style="background-color:gray;">
            &#160;&#160;&#160;
        </td>
        <td>
            <div @ref="_bellmanFordGraphRenderTo"></div>
        </td>
    </tr>
</table>

<InputTextArea rows="5" class="form-control" @bind-Value="OutputGraphText" placeholder="output graph" />
@code 
{
    private ElementReference _inputGraphRenderTo;
    private ElementReference _bellmanFordGraphRenderTo; 
    private int NodeCount = 5;
    private int EdgeCount = 8;
    private int StartingVertex = 1;
    private string GraphText 
= @"5 8
1 2 2
1 5 3
2 4 -2
3 1 1
4 1 4
4 3 1
4 5 2
5 3 -1
1";
    private string OutputGraphText = "";
    private string inputDotDiagram = "";
    private string solvedDotDiagram = "";
    private Lib.Graphs.MathGraph<int> inputGraph;
    private async Task LoagGraph()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");

            string[] lines = GraphText.Split("\n");
            inputGraph = new Lib.Graphs.MathGraph<int>(true);
            Lib.Graphs.MathGraph<int>.LoadGraph(inputGraph, lines);
            inputDotDiagram = inputGraph.GenerateDot();


        await diagramModule.InvokeVoidAsync("renderDot", inputDotDiagram, _inputGraphRenderTo);
    }
    private async Task GenerateGraph()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");

            if(EdgeCount <= NodeCount){
                EdgeCount = NodeCount;
            }
            inputGraph = GenerateRandomGraph(NodeCount+1, EdgeCount);
            inputDotDiagram = inputGraph.GenerateDot();


        await diagramModule.InvokeVoidAsync("renderDot", inputDotDiagram, _inputGraphRenderTo);
    }
    public Lib.Graphs.MathGraph<int> GenerateRandomGraph(int Nodes, int Edges){
        var graph = new Lib.Graphs.MathGraph<int>(true);
        graph.GenerateGraph(Nodes, Edges, graph);
        GraphText = graph.GenerateAdjacentList();
        return graph;
    }
    private async Task ComputeBellmanFord()
    {
        var diagramModule = await JsRuntime
            .InvokeAsync<IJSObjectReference>("import", "/diagrams.js?version=0.2");

        var distances_edges = inputGraph.BellmanFord(StartingVertex);
        if(distances_edges!=null)
        {
            Lib.Graphs.MathGraph<int> graph = new Lib.Graphs.MathGraph<int>(true);
            Lib.Graphs.MathGraph<int>.LoadBellmanFordDistances(graph, distances_edges.Item2, distances_edges.Item1);
            if(graph.GetVertices().Count > 0)
            {
                solvedDotDiagram = graph.GenerateDot();
                OutputGraphText = graph.GenerateAdjacentList();
                await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, _bellmanFordGraphRenderTo);
            }
            else{
                OutputGraphText = $"There is no path from starting vertex {StartingVertex}";
                solvedDotDiagram = "digraph {}";
                await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, _bellmanFordGraphRenderTo);
            }
        }
        else
        {
                OutputGraphText = "contains negative cycles";
                solvedDotDiagram = "digraph {}";
                await diagramModule.InvokeVoidAsync("renderDot", solvedDotDiagram, _bellmanFordGraphRenderTo);
        }
    }
}